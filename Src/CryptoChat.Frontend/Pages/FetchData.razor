@page "/chats"
@using CryptoChat.Api.Contracts.Data
 @using CryptoChat.Frontend.Services
@inject ChatService ChatService
@inject AuthenticateService AuthenticateService
@inject IJSRuntime JS

<PageTitle>Weather forecast</PageTitle>

<h1>Чаты</h1>

<div class="main">
    <div class="container-fluid">
        <div class="row mb-5">
            <div class="col-4">
                <div class="row">
                    <div class="col">
                        <ul class="list-group">
                            @foreach (var room in _rooms)
                            {
                                <li class="@GetRoomDtoClass(room)" @onclick="() => SetActiveRoom(room)">
                                    @GetRoomViewName(room)
                                </li>
                            }
                        </ul>
                    </div>
                </div>
            </div>
            <div class="col-8">
                <div class="chat-window scroll-container">
                    <div data-bs-spy="scroll">
                        @foreach (var message in _messages)
                        {
                            <div class="@GetMessageClass(message)">
                                <h5>@message.User.Name</h5>
                                <p class="message-text">@message.Text</p>
                            </div>
                        }
                    </div>
                </div>
                <EditForm Model="@_currentMessage" OnSubmit="SendMessage">
                    <div class="input-group mb-0" style="margin-top: 10px;">
                        <InputText @bind-Value="_currentMessage.Text" type="text" class="form-control" placeholder="Напишите сообщение"
                                   aria-label="Recipient's username" aria-describedby="button-addon2" style="padding-top: 5px;" />
                        <button class="btn btn-warning" type="submit" id="button-addon2">
                            Отправить
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
</div>

<style>
    .chat-window{
        height: 600px;
        border-color: #5c636a;
        border-width: 2px;
    }
    .scroll-container {
        overflow: auto;
    }
    .message{
        padding: 5px 15px;
        max-width: 500px;
        margin-bottom: 5px;
        font-size: 15px;
        background-color: #86b7fe;
        border-radius: 10px;
    }
    .message-text{
        font-size: 15px;
        margin-bottom: 5px;
        display: inline-block;
    }
    .message-outgoing{
        margin-left: auto;
        text-align: right;
    }
    .message-incoming{
    }
    
</style>

@code {
    private List<AnnotatedRoomViewDto> _rooms = new();
    private UserDto _myselfInfo = new();
    private List<AnnotatedMessageDto> _messages = new();
    private SendMessageRequestDto _currentMessage = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _myselfInfo = await AuthenticateService.GetMyselfInfoFromStorage();
        var roomsDto = await ChatService.GetMyRooms();
        _rooms = roomsDto.Select(r => new AnnotatedRoomViewDto(r)).ToList();
        _rooms[0].IsCurrent = true;

        await UpdateMessages();

        UpdateMessagesBackgroundTask();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollMessagesToEnd();
    }
    
    public RoomViewDto CurrentRoom => _rooms.Find(r => r.IsCurrent);

    public async Task SetActiveRoom(AnnotatedRoomViewDto room)
    {
        _rooms.ForEach(r => r.IsCurrent = false);
        room.IsCurrent = true;
        await UpdateMessages();
    }

    public async Task UpdateMessages()
    {
        _messages = await ChatService.GetRoomMessages(_rooms.Find(r => r.IsCurrent).Id);
    }
    
    public string GetRoomViewName(RoomViewDto room)
    {
        return room.Users.First(u => u.Id != _myselfInfo.Id).Name;
    }

    public string GetRoomDtoClass(AnnotatedRoomViewDto room)
    {
        return room.IsCurrent ? "list-group-item active" : "list-group-item";
    }

    public string GetMessageClass(AnnotatedMessageDto message)
    {
        return message.IsMyMessage ? "message message-incoming" : "message message-outgoing";
    }

    public async Task SendMessage(EditContext context)
    {
        await ChatService.SendMessage(CurrentRoom.Id, _currentMessage);
        _currentMessage.Text = "";
        await UpdateMessages();
    }

    public class AnnotatedRoomViewDto : RoomViewDto
    {
        public bool IsCurrent { get; set; }

        public AnnotatedRoomViewDto(RoomViewDto roomViewDto)
        {
            Id = roomViewDto.Id;
            Users = roomViewDto.Users;
            IsCurrent = false;
        }
    }

    private async Task ScrollMessagesToEnd()
    {
        await JS.InvokeVoidAsync("scrollMessagesToEnd");
    }
    
    private async Task UpdateMessagesBackgroundTask(CancellationToken cancellationToken = default)
    {
        while (!cancellationToken.IsCancellationRequested)
        {
            await UpdateMessages();
            await Task.Delay(2000);
            Console.WriteLine("update messages");
            StateHasChanged();
        }
    }
}