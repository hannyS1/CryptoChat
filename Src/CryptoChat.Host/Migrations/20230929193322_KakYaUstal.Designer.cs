// <auto-generated />
using CryptoChat.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CryptoChat.Host.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20230929193322_KakYaUstal")]
    partial class KakYaUstal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.10");

            modelBuilder.Entity("CryptoChat.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("room_id");

                    b.Property<string>("Text")
                        .HasColumnType("TEXT")
                        .HasColumnName("text");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("message");
                });

            modelBuilder.Entity("CryptoChat.Entities.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.HasKey("Id");

                    b.ToTable("room");
                });

            modelBuilder.Entity("CryptoChat.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("AllowedCategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT")
                        .HasColumnName("password");

                    b.HasKey("Id");

                    b.HasIndex("AllowedCategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("CryptoChat.Entities.UserRoom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("RoomId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("room_id");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("UserId");

                    b.ToTable("user_room");
                });

            modelBuilder.Entity("CryptoChat.Entities.WarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("INTEGER")
                        .HasColumnName("category_id");

                    b.Property<int>("Count")
                        .HasColumnType("INTEGER")
                        .HasColumnName("count");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("CryptoChat.Entities.WarehouseItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("WarehouseItemCategories");
                });

            modelBuilder.Entity("CryptoChat.Entities.Message", b =>
                {
                    b.HasOne("CryptoChat.Entities.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoChat.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoChat.Entities.User", b =>
                {
                    b.HasOne("CryptoChat.Entities.WarehouseItemCategory", "AllowedCategory")
                        .WithMany("AccessUsers")
                        .HasForeignKey("AllowedCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AllowedCategory");
                });

            modelBuilder.Entity("CryptoChat.Entities.UserRoom", b =>
                {
                    b.HasOne("CryptoChat.Entities.Room", "Room")
                        .WithMany("UsersRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CryptoChat.Entities.User", "User")
                        .WithMany("UsersRooms")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CryptoChat.Entities.WarehouseItem", b =>
                {
                    b.HasOne("CryptoChat.Entities.WarehouseItemCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CryptoChat.Entities.Room", b =>
                {
                    b.Navigation("UsersRooms");
                });

            modelBuilder.Entity("CryptoChat.Entities.User", b =>
                {
                    b.Navigation("UsersRooms");
                });

            modelBuilder.Entity("CryptoChat.Entities.WarehouseItemCategory", b =>
                {
                    b.Navigation("AccessUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
